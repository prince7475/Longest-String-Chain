Given a list of strings, write a function that returns the longest string chain that 
can be built from those strings. A string chain is defined as follows: 

let string A be a string in the initial array; if removing any single character from string A yields a 
new string B that is contained in the initial array of strings, then strings A and B (Completed)
form a string chain of length 

2. Similarly, if removing any single character from string 
B yields a new string C that is contained in the initial array of strings, then (Completed)
strings A, B, and C form a string chain of length


3. The function should return the string 
chain in descending order (i.e., from the longest string to the shortest
one). Note that string chains of length 1 do not exist;


if the list of strings does not contain 
any string chain formed by 2 or more strings, the function should return (Completed)
an empty list.


Sample input: ["abde","abc","abd","abcde","ade","ae","1abde","abcdef"]
Sample output: ["abcdef","abcde","abde","ade","ae"]

[ae]

function longestStringChain(array){
  let hashMap = {}
  let path = {}
  array.sort((a,b) => a.length - b.length)
  
  for(let str of array){
    hashMap[str] = 1
    path[str] = null
  }
  
  for(let i = 1; i < array.length; i++){
    let str = array[i]
    longestSubStringHelper(str,hashMap,path)
  }
  let longestStr = null
  for(let key in hashMap){
    if(longestStr === null || hashMap[key] > hashMap[longestStr]){
      longestStr = key
    }
  }
  
  if(hashMap[longestStr] === 1) return []
  
  let result = createPath(path,longestStr)
  return result
}


function longestSubStringHelper(str,hashMap,path){
  for(let i = 0; i < str.length; i++){
    let currStr = str.slice(0, i) + str.slice(i + 1)
    if(currStr in hashMap){
      let amount = hashMap[currStr] + 1
      if(amount > hashMap[str]){
        hashMap[str] = amount
        path[str] = currStr
      }
    }
  }
}

function createPath(path,longestStr){
  let result = []
  let curr = longestStr
  while(path[curr]){
    result.push(curr)
    curr = path[curr]
  }
  result.push(curr)
  return result
}

